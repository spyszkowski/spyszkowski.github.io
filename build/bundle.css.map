{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "App.svelte",
    "RdfForceGraph.svelte"
  ],
  "sourcesContent": [
    "<script lang=\"ts\">import RdfForceGraph from \"./RdfForceGraph.svelte\";\nimport ResponsiveResume from \"./ResponsiveResume.svelte\";\nexport let name;\nlet current = \"home\";\n</script>\n\n<style>\n  main {\n    text-align: center;\n    padding: 1em;\n    max-width: 240px;\n    margin: 0 auto;\n  }\n\n  div {\n    color: grey;\n    text-transform: uppercase;\n    font-size: 1.8em;\n    font-weight: 100;\n  }\n\n  @media (min-width: 640px) {\n    main {\n      max-width: none;\n    }\n  }\n\n\n\n  .flexcontainer {\n    display: flex;\n\tflex-direction: row;\n\n  }\n\n\n  .flexcontainer div {\n\tmargin-right: 30px;\n\tmargin-bottom: 1px;\n\tborder-bottom: 1px solid white;\n  }\n\n  .flexcontainer div:hover {\n\t/* text-decoration-line: underline;\n  \ttext-decoration-thickness: 1px; */\n\t  text-decoration: none;\n    border-bottom: 1px solid red;\n  }\n\n\n  .flexcontainer div .label{\n  }\n\n  .flexcontainer div .symbol{\n    font-family:\"FontAwesome\";\n  }\n  .selected {\n    color: #ff3e00;\n  }\n\n  @media (max-width: 50em) {\n\n.flexcontainer div .label{\n  display: none;\n  }\n\n}\n\n@media (min-width: 50em) {\n\n.flexcontainer div .symbol{\n  display: none;\n  }\n\n}\n\n</style>\n\n<main>\n  <div class=\"flexcontainer\">\n    <div class=\"{current === 'home' ? 'selected' : ''}\"\n  on:click=\"{() => current = 'home'}\">\n  <span class=\"symbol\"><i class=\"fas fa-home\"></i> </span><span class=\"label\">Home</span>      \n    </div>\n    <div \tclass=\"{current === 'resume' ? 'selected' : ''}\"\n  on:click=\"{() => current = 'resume'}\">\n  <span class=\"symbol\"><i class=\"fas fa-project-diagram\"></i> </span><span class=\"label\">Semantic</span></div>\n    <div \tclass=\"{current === 'about' ? 'selected' : ''}\"\n\ton:click=\"{() => current = 'about'}\"><span class=\"symbol\"><i class=\"fas fa-info\"></i> </span><span class=\"label\">About</span></div>\n  </div>\n  \n  {#if current == 'home'}\n    <ResponsiveResume />\n  {/if}\n  {#if current == 'resume'}\n    <RdfForceGraph />\n  {/if}\n\n</main>\n",
    "<script>\n  import { onMount } from \"svelte\";\n  import { onDestroy } from \"svelte\";\n  import * as d3 from \"d3\";\n\n  let simulation;\n\n  onMount(async () => {\n    let color = d3.scaleOrdinal(d3.schemeCategory10);\n    //let width = 800;\n    //let height = 350;\n\n    var width = window.innerWidth,///2,\n            height = window.innerHeight;///2;\n\n    let svg = d3\n      .select(\"#chart\")\n      .append(\"svg\")\n      .attr(\"class\", \"chart\")\n      .attr(\"viewBox\", [-width , -height, width*2, height*2]);\n    //   let svg = d3.select(\"svg\");\n    //  svg.attr(\"viewBox\", [-width / 2, -height / 2, width, height]);\n\n    const baseG = svg.append(\"g\");\n\n    const simulation = d3\n      .forceSimulation()\n      .force(\n        \"charge\",\n        d3.forceManyBody().strength((d) => {\n          /*\n      if(d.termType==='Literal'){\n                  return -20;\n                }else{\n                  return -1000;\n                }\n       }*/\n          return -1000;\n        })\n      )\n      .force(\n        \"link\",\n        d3\n          .forceLink()\n          .id((d) => d.id)\n          .distance((d) => {\n            // if(d.target.termType==='Literal'){\n            if (isOpened(d.target.id)) {\n              return 200;\n            } else {\n              return 90;\n            }\n          })\n      )\n      .force(\"x\", d3.forceX())\n      .force(\"y\", d3.forceY())\n      .on(\"tick\", ticked);\n\n    var path = baseG\n      .append(\"g\")\n      .attr(\"fill\", \"none\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-opacity\", 0.2)\n      .selectAll(\"path\");\n\n    var linktext = baseG.append(\"g\").selectAll(\"g.linklabelholder\");\n\n    let node = baseG\n      .append(\"g\")\n      // .attr(\"stroke\", \"#fff\")\n      .attr(\"stroke-width\", 1)\n      .selectAll(\".chart_group\");\n\n    //label for node created as part of link\n    var nodeLabel2 = baseG\n      .append(\"g\")\n      .attr(\"stroke\", \"#000\")\n      .attr(\"stroke-opacity\", 0.2)\n      .selectAll(\"text\");\n\n    function ticked() {\n      // node.attr(\"cx\", d => d.x)\n      //     .attr(\"cy\", d => d.y)\n\n      node.attr(\"transform\", function (d) {\n        return \"translate(\" + d.x + \",\" + d.y + \")\";\n      });\n\n      nodeLabel2.attr(\"transform\", function (d) {\n        let relx, rely;\n        let r = 18; //node radious\n        let xdistance = 5;\n        rely = this.getBBox().height / 2; //vertical text aligment\n        if (d.source.x > d.target.x) {\n          //lablel on the left side of the node\n          relx = -( (this.getBBox().width /2 ) + r + xdistance);\n        } else {\n          //lablel on the right side of the node\n          relx = this.getBBox().width /2 + r + xdistance;\n        }\n        // relx=0;\n          rely=0;\n        return (\n          \"translate(\" + (d.target.x + relx) + \",\" + (d.target.y - rely) + \")\"\n        );\n      });\n\n      // link\n      //   .attr(\"x1\", (d) => d.source.x)\n      //   .attr(\"y1\", (d) => d.source.y)\n      //   .attr(\"x2\", (d) => d.target.x)\n      //   .attr(\"y2\", (d) => d.target.y);\n\n      path.attr(\"d\", function (d) {\n        var dx = d.target.x - d.source.x,\n          dy = d.target.y - d.source.y,\n          // dr = 75 / d.linknum; //linknum is defined above\n          dr = 1;\n        // var dValue=\"M\" +\n        // d.source.x +\n        // \",\" +\n        // d.source.y +\n        // \"A\" +\n        // dr +\n        // \",\" +\n        // dr +\n        // \" 0 0,1 \" +\n        // d.target.x +\n        // \",\" +\n        // d.target.y;\n\n        var dValue;\n\n        //change path directon to make the text always from left to right\n        if (d.source.x < d.target.x) {\n          dValue =\n            \"M\" +\n            d.source.x +\n            \",\" +\n            d.source.y +\n            \"L\" +\n            d.target.x +\n            \",\" +\n            d.target.y;\n        } else {\n          dValue =\n            \"M\" +\n            d.target.x +\n            \",\" +\n            d.target.y +\n            \"L\" +\n            d.source.x +\n            \",\" +\n            d.source.y;\n        }\n        return dValue;\n      });\n    }\n\n    // Terminate the force layout when this cell re-runs.\n\n    // invalidation.then(() => simulation.stop());\n\n    var nodeById = new Map();\n\n    var chart = Object.assign(svg.node(), {\n      update({ nodes, links }) {\n        prepareNodeRelations(nodes, links);\n        // Make a shallow copy to protect against mutation, while\n        // recycling old nodes to preserve position and velocity.\n        const old = new Map(node.data().map((d) => [d.id, d]));\n        nodes = nodes.map((d) => Object.assign(old.get(d.id) || {}, d));\n        links = links.map((d) => Object.assign({}, d));\n\n        node = node\n          .data(nodes, (d) => d.id)\n          .join((group) => {\n            var enter = group.append(\"g\").attr(\"class\", \"chart_group\");\n\n            enter.call(drag(simulation));\n\n            enter\n              .append(\"circle\")\n              .attr(\"r\", (d) => {\n                // if (d.termType === \"Literal\") {\n                //   return 12;\n                // } else {\n                //   return 18;\n                // }\n                return 18;\n              })\n              .attr(\"fill\", (d) => color(d.id))\n              .on(\"click\", clicked)\n              .on(\"mouseover\", function (d, n) {\n                if(isOpened(n.id)){\n                  d3.select(this).style(\"fill\", \"gray\");\n                }else{\n                  d3.select(this).style(\"fill\", \"red\");\n                }\n              })\n              .on(\"mouseout\", function (d) {\n                d3.select(this).style(\"fill\", (d) => color(d.id));\n              });\n\n            /*\nenter.append('rect').transition().duration(500).attr('width', 60)\n                .attr('height', 80)\n                .attr('x', -30)\n                .attr('y', -40)\n                .style('fill', 'white')\n                .attr('stroke', 'black')\nenter.append('text').text('This is some information about whatever')\n                .attr('x', 50)\n                .attr('y', 150)\n                .attr('fill', 'black')\n*/\n            //append symbol\n            enter\n              .append(\"text\")\n              .attr(\"alignment-baseline\", \"central\")\n              .attr(\"text-anchor\", \"middle\")\n              .attr(\"font-family\", \"FontAwesome\")\n              .attr(\"font-size\", function (d) {\n                return \"20px\";\n              })\n              .attr(\"stroke\", \"none\")\n              .attr(\"fill\", \"#FFF\")\n              // .attr(\"stroke-opacity\", 0.2)\n              .attr(\"pointer-events\", \"none\")\n              .text(function (d) {\n                return getNodeIconText(d);\n              }); //f3c5\n            // .on(\"click\", clicked)\n            // .on(\"mouseover\", function (d) {\n            //   d3.select(this).style(\"fill\", \"red\");\n            // })\n            // .on(\"mouseout\", function (d) {\n            //   d3.select(this).style(\"fill\", color(d.id));\n            // });\n\n            //append label -replaced by label2\n            // enter\n            //   .append(\"text\")\n            //   .text(function (d) {\n            //     return d.label;\n            //   })\n            //   .style(\"font-weight\", \"bold\")\n            //   .attr(\"x\", 8)\n            //   .attr(\"y\", 3);\n\n            //append tooltip?\n            enter.append(\"title\").text(function (d) {\n              return d.id;\n            });\n            //    enter.append(\"rect\").attr(\"class\",\"group_rect\");\n            // enter.append(\"text\").attr(\"class\",\"group_text\");\n            // enter.append(\"image\").attr(\"class\",\"group_image\");\n            return enter;\n          });\n\n        // link = link.data(links, (d) => [d.source, d.target]).join(\"line\");\n\n        nodeLabel2 = nodeLabel2\n          .data(links, (d) => [d.source, d.target, d.type]) //, (d) => [d.source, d.target]\n          .join((group) => {\n            var enter = group.append(\"g\").attr(\"class\", \"chart_label2_group\");\n\n            enter\n              .append(\"text\")\n              .text(function (d) {\n                //get node label from target node\n                return nodeById.get(d.target).label;\n              })\n              .style(\"font-weight\", \"bold\")\n              // .attr(\"x\", \"50%\")\n              .attr(\"y\", 0)\n              .attr(\"text-anchor\", \"middle\")\n             // .attr(\"dominant-baseline\", \"middle\");\n\n              //node sub label\n\n              enter\n              .append(\"text\")\n              .text(function (d) {\n                //comment is only shown for not opened nodes, because it visualy overlaps opened nodes\n                  if(!isOpened(d.target)){\n                    return nodeById.get(d.target).comment;\n                  }else{\n                    return undefined;\n                  }\n\n              })\n              .style(\"font-size\", \"8px\")\n              // .attr(\"x\", \"50%\")\n              .attr(\"y\", 14)\n              .attr(\"text-anchor\", \"middle\")\n            //  .attr(\"dominant-baseline\", \"middle\");\n\n\n            return enter;\n          });\n\n        path = path.data(links).join((group) => {\n          // var enter = group.append(\"g\").attr(\"class\", \"path_group\");\n          var enter = group\n            .append(\"path\")\n            .attr(\"class\", function (d) {\n              return \"link \" + d.type;\n            })\n            .attr(\"id\", function (d, i) {\n              return \"linkId_\" + i;\n            })\n            .attr(\"marker-end\", function (d) {\n              return \"url(#\" + d.type + \")\";\n            });\n          return enter;\n        });\n\n        linktext = linktext\n          .data(links, (d) => [d.source, d.target, d.type]) //, (d) => [d.source, d.target]\n          .join((group) => {\n            //var enter = group.append(\"g\").attr(\"class\", \"path_group\");\n\n            var enter = group\n              .append(\"g\")\n              .attr(\"class\", \"linklabelholder\")\n              .append(\"text\")\n              .attr(\"class\", \"linklabel\")\n              // .attr(\"x\", \"40\")\n              // .attr(\"y\", \"-25\")\n              .attr(\"text-anchor\", \"middle\");\n            enter\n              .append(\"textPath\")\n              .attr(\"startOffset\", \"50%\")\n              .attr(\"xlink:href\", function (d, i) {\n                return \"#linkId_\" + i;\n              })\n              .text(function (d) {\n                return d.label;\n              });\n            return enter;\n          });\n        simulation.nodes(nodes);\n        simulation.force(\"link\").links(links);\n        simulation.alpha(1).restart();\n      },\n    });\n\n    /**\n     * Dragging\n     * @param simulation\n     */\n\n    function drag(simulation) {\n      function dragstarted(event) {\n        if (!event.active) simulation.alphaTarget(0.3).restart();\n        event.subject.fx = event.subject.x;\n        event.subject.fy = event.subject.y;\n      }\n\n      function dragged(event) {\n        event.subject.fx = event.x;\n        event.subject.fy = event.y;\n      }\n\n      function dragended(event) {\n        if (!event.active) simulation.alphaTarget(0);\n        event.subject.fx = null;\n        event.subject.fy = null;\n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended);\n    }\n\n    //zoom\n\n    svg.call(\n      d3\n        .zoom()\n        .extent([\n          [0, 0],\n          [width, height],\n        ])\n        .scaleExtent([0.2, 8])\n        .on(\"zoom\", zoomed)\n    );\n\n    function zoomed({ transform }) {\n      baseG.attr(\"transform\", transform);\n    }\n\n    function isOpened(id) {\n      return openedNodes.has(id) || openedLists.has(id);\n    }\n\n    let rootNodeId=\"https://pyszkowski.com/cv\";\n\n    let openedNodes = new Set();\n    openedNodes.add(rootNodeId); // pys:me\n\n    //used to speed up search for opened link nodes as the key in the openedListsMap is the parent of the opened link BlankNode\n    let openedLists = new Set();\n\n    //map where the key is a node that is conected to the openend link BlankNode via a predicate that is the value in the map\n    let openedListsMap = new Map();\n\n    async function fetchNodes() {\n      let prodUrl=\"https://rdf-resume.herokuapp.com/graph-repository\";\n      let localUrl=\"http://localhost:3033/graph-repository\";\n\n      fetch(prodUrl, {\n        headers: new Headers({ \"Content-Type\": \"application/json\" }),\n        method: \"POST\",\n        body: JSON.stringify({\n          query:\n            `\n      PREFIX pys: <https://pyszkowski.com/>\n      PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n      PREFIX cv: <http://rdfs.org/resume-rdf/cv.rdfs#>\n      PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n      SELECT ?s ?p ?o ?t ?l ?c\n      WHERE \n      {\n        {\n          values (?s) {` +\n            Array.from(openedNodes)\n              .map((id) => \"(<\" + id + \"> )\")\n              .join(\" \") +\n            `} \n              \n          ?s ?p ?o \n          OPTIONAL {?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?t .}\n          OPTIONAL {?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#comment> ?c .}\n        }` \n        +\n        Array.from(openedListsMap.entries()).map(([baseSubject, predicate]) => `\n    UNION\n    {\n      values (?s ?p) { (<${baseSubject}> <${predicate}>) } \n     ?s ?p ?o .\n      ?s <${predicate}>/<http://www.w3.org/1999/02/22-rdf-syntax-ns#rest>*/<http://www.w3.org/1999/02/22-rdf-syntax-ns#first>  ?l .\n    }`\n            ).join(\"\\n\") +\n            `}`,\n\n          // `\n          //     PREFIX pys: <https://pyszkowski.com/>\n          //     PREFIX foaf: <http://xmlns.com/foaf/0.1/>\n          //     PREFIX cv: <http://rdfs.org/resume-rdf/cv.rdfs#>\n          //     PREFIX rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\n          //     SELECT ?s ?p ?o ?t ?l\n          //     WHERE\n          //     {\n          //         ?s ?p ?o\n          //         OPTIONAL {?o <http://www.w3.org/1999/02/22-rdf-syntax-ns#type> ?t .}\n\n          // }`\n        }),\n      })\n        .then((r) => r.json())\n        .then((graph) => {\n          chart.update(graph);\n        });\n    }\n\n    function closeChildrenNodes(nodeId, depth){\n      if(openedNodes.has(nodeId)){\n        let node = nodeById.get(nodeId);\n        if(node.sourceLinks){\n          node.sourceLinks.forEach(link=> closeChildrenNodes(link.target, depth + 1));\n        }\n        if(nodeId !== rootNodeId){\n          openedNodes.delete(nodeId);\n        }\n      }\n      if(openedListsMap.has(nodeId)){\n        openedListsMap.delete(nodeId);\n      }\n      if(openedLists.has(nodeId)){\n        openedLists.delete(nodeId);\n      }\n    }\n\n    async function clicked(event, d) {\n      if (d.termType === \"NamedNode\") {\n        //|| d.termType === \"BlankNode\"\n        //only for nodes with id\n        let nodeId = d.id;\n        if (openedNodes.has(nodeId)) {\n          //openedNodes.delete(nodeId);\n          closeChildrenNodes(nodeId);\n        } else {\n          openedNodes.add(nodeId);\n        }\n      }\n      //(<https://pyszkowski.com/workHistory/Empolis> <http://rdfs.org/resume-rdf/cv.rdfs#jobDescription>)\n      if (d.termType === \"BlankNode\") { //todo: proper check it is a list\n        if (d.targetLinks && d.targetLinks.size == 1) {\n          let nodeId = d.id;\n          let targetLink = d.targetLinks.values().next().value;\n          let baseSubject = targetLink.source;\n          let predicate = targetLink.type;\n          if(openedListsMap.has(baseSubject))\n          {\n            openedLists.delete(nodeId);//used only to speed up search\n            openedListsMap.delete(baseSubject)\n          }else{\n            openedLists.add(nodeId);\n          openedListsMap.set(baseSubject, predicate);\n          }\n        }\n      }\n      await fetchNodes();\n    }\n\n    function prepareNodeRelations(nodes, links) {\n      //prepare a map of id to nodes for quicer access\n      nodes.forEach(function (node) {\n        nodeById.set(node.id, node);\n      });\n\n      links.forEach(function (link) {\n        let sourceNode = nodeById.get(link.source);\n        let targetNode = nodeById.get(link.target);\n\n        let sourceLinks = sourceNode.sourceLinks;\n        if (!sourceLinks) {\n          sourceLinks = new Set();\n          sourceNode.sourceLinks = sourceLinks;\n        }\n        sourceLinks.add(link);\n\n        let targetLinks = targetNode.targetLinks;\n        if (!targetLinks) {\n          targetLinks = new Set();\n          targetNode.targetLinks = targetLinks;\n        }\n        targetLinks.add(link);\n      });\n    }\n\n    function getNodeIconText(d) {\n      let linkType;\n      if (d.targetLinks && d.targetLinks.size == 1) {\n        let targetLink = d.targetLinks.values().next().value;\n        linkType = targetLink.type;\n      } else {\n        linkType = \"UNKNOWN\";\n      }\n\n      switch (d.type) {\n        case \"http://xmlns.com/foaf/0.1/Person\":\n          return \"\\uf2bb\"; //\"\\uf406\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#WorkHistory\":\n          return \"\\uf2b5\"; // \"\\uf508\"; // \"\\uf64a\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#Company\":\n          return \"\\uf1ad\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#CV\":\n          return \"\\uf508\";\n      }\n\n      switch (linkType) {\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#startDate\":\n          return \"\\uf251\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#endDate\":\n          return \"\\uf253\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#jobTitle\":\n          return \"\\uf0e8\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#hasNationality\":\n          return \"\\uf0ac\";\n        case \"http://xmlns.com/foaf/0.1/gender\":\n          switch (d.id) {\n            case '\"man\"^^http://www.w3.org/2000/01/rdf-schema#Literal':\n              return \"\\uf183\";\n            case '\"woman\"^^http://www.w3.org/2000/01/rdf-schema#Literal':\n              return \"\\uf182\";\n          }\n        case \"http://schema.org/birthPlace\":\n          return \"\\uf3c5\";\n        case \"http://rdfs.org/resume-rdf/cv.rdfs#jobDescription\":\n          return \"\\uf0ae\";\n      }\n\n      return \"\\uf083\";\n    }\n    // let graph1 = {\n    //   nodes: [{ id: \"a\" }, { id: \"b\" }, { id: \"c\" }, { id: \"d\" }, { id: \"e\" }],\n    //   links: [\n    //     { source: \"a\", target: \"b\",type:\"hasJob\" },\n    //     { source: \"b\", target: \"c\",type:\"hasJob\" },\n    //     { source: \"c\", target: \"d\",type:\"hasJob\" },\n    //     { source: \"c\", target: \"e\",type:\"hasJob\" },\n    //   ],\n    // };\n\n    // chart.update(graph1);\n    await fetchNodes();\n\n    // setTimeout(() => {\n    //   chart.update(graph1);\n    // }, 0);\n\n    // setTimeout(()=>{\n    // chart.update(graph1)}, 6000);\n  }); //end mount\n\n  onDestroy(() => \n  {if(simulation){\n    simulation.stop();\n  }\n  });\n</script>\n\n<!--    // background-color: steelblue;-->\n<style>\n  :global(.chart) {\n    font: 12px sans-serif;\n    text-align: right;\n    padding: 3px;\n    margin: 1px;\n    color: black;\n\n    border-color: lightgray;\n    border-style: solid;\n    border-width: 1px;\n    background: #f6fafd content-box;\n    padding: 3px;\n\n  }\n\n  :global(.links line) {\n    stroke: #999;\n    stroke-opacity: 0.6;\n  }\n\n  :global(.nodes circle) {\n    fill: #000000;\n    stroke: rgb(0, 0, 0);\n    stroke-width: 1px;\n  }\n\n  :global(.text) {\n    fill: #000000;\n    stroke: #000000;\n    stroke-width: 0.5px;\n    font-size: 10px;\n  }\n\n  :global(.linklabel) {\n    fill: #000000;\n    stroke: #000000;\n    stroke-width: 0.5px;\n    font-size: 8px;\n  }\n</style>\n\n\n\n<div id=\"chart\"></div>\n"
  ],
  "names": [],
  "mappings": "AAOE,IAAI,4BAAC,CAAC,AACJ,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,SAAS,CAAE,KAAK,CAChB,MAAM,CAAE,CAAC,CAAC,IAAI,AAChB,CAAC,AAED,GAAG,4BAAC,CAAC,AACH,KAAK,CAAE,IAAI,CACX,cAAc,CAAE,SAAS,CACzB,SAAS,CAAE,KAAK,CAChB,WAAW,CAAE,GAAG,AAClB,CAAC,AAED,MAAM,AAAC,YAAY,KAAK,CAAC,AAAC,CAAC,AACzB,IAAI,4BAAC,CAAC,AACJ,SAAS,CAAE,IAAI,AACjB,CAAC,AACH,CAAC,AAID,cAAc,4BAAC,CAAC,AACd,OAAO,CAAE,IAAI,CAChB,cAAc,CAAE,GAAG,AAElB,CAAC,AAGD,4BAAc,CAAC,GAAG,cAAC,CAAC,AACrB,YAAY,CAAE,IAAI,CAClB,aAAa,CAAE,GAAG,CAClB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,AAC7B,CAAC,AAED,4BAAc,CAAC,iBAAG,MAAM,AAAC,CAAC,AAGzB,eAAe,CAAE,IAAI,CACpB,aAAa,CAAE,GAAG,CAAC,KAAK,CAAC,GAAG,AAC9B,CAAC,AAMD,4BAAc,CAAC,GAAG,CAAC,qBAAO,CAAC,AACzB,YAAY,aAAa,AAC3B,CAAC,AACD,SAAS,4BAAC,CAAC,AACT,KAAK,CAAE,OAAO,AAChB,CAAC,AAED,MAAM,AAAC,YAAY,IAAI,CAAC,AAAC,CAAC,AAE5B,4BAAc,CAAC,GAAG,CAAC,oBAAM,CAAC,AACxB,OAAO,CAAE,IAAI,AACb,CAAC,AAEH,CAAC,AAED,MAAM,AAAC,YAAY,IAAI,CAAC,AAAC,CAAC,AAE1B,4BAAc,CAAC,GAAG,CAAC,qBAAO,CAAC,AACzB,OAAO,CAAE,IAAI,AACb,CAAC,AAEH,CAAC;ACiiBS,MAAM,AAAE,CAAC,AACf,IAAI,CAAE,IAAI,CAAC,UAAU,CACrB,UAAU,CAAE,KAAK,CACjB,OAAO,CAAE,GAAG,CACZ,MAAM,CAAE,GAAG,CACX,KAAK,CAAE,KAAK,CAEZ,YAAY,CAAE,SAAS,CACvB,YAAY,CAAE,KAAK,CACnB,YAAY,CAAE,GAAG,CACjB,UAAU,CAAE,OAAO,CAAC,WAAW,CAC/B,OAAO,CAAE,GAAG,AAEd,CAAC,AAEO,WAAW,AAAE,CAAC,AACpB,MAAM,CAAE,IAAI,CACZ,cAAc,CAAE,GAAG,AACrB,CAAC,AAEO,aAAa,AAAE,CAAC,AACtB,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CACpB,YAAY,CAAE,GAAG,AACnB,CAAC,AAEO,KAAK,AAAE,CAAC,AACd,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,KAAK,CACnB,SAAS,CAAE,IAAI,AACjB,CAAC,AAEO,UAAU,AAAE,CAAC,AACnB,IAAI,CAAE,OAAO,CACb,MAAM,CAAE,OAAO,CACf,YAAY,CAAE,KAAK,CACnB,SAAS,CAAE,GAAG,AAChB,CAAC"
}